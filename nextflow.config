/*
 * Chedin Lab NGS Pipeline Configuration
 * Comprehensive analysis of RNA-seq, EU-seq, sDRIP-seq, ENDseq
 */

// Pipeline metadata
manifest {
    name            = 'ngs_piprline'
    author          = 'srhartono@ucdavis.edu'
    homePage        = 'https://github.com/srhartono/ngs_pipeline'
    description     = 'Multiomics pipeline for NGS functional analysis'
    mainScript      = 'main.nf'
    nextflowVersion = '>=22.04.0'
    version         = '1.0.0'
}

// Global default params
params {
    // Input/Output
    samples                     = null
    outdir                      = './results'
    tracedir                    = "${params.outdir}/pipeline_info"
    
    // Assays to process
    assays                      = 'RNAseq,EUseq,sDRIPseq,BSseq,ENDseq'
    
    // Reference files
    genome_fasta                = null
    genome_gtf                  = null
    genome_gff                  = null
    star_index                  = null
    bowtie2_index              = null
    bismark_index              = null
    dbsnp_vcf                  = null
    blacklist_bed              = null
    
    // QC and trimming
    skip_fastqc                = false
    skip_multiqc               = false
    adapter_fasta              = null
    save_trimmed_reads         = false
    trim_nextseq               = 0
    
    // Mapping parameters
    star_ignore_sjdbgtf        = false
    star_twopassmode           = 'Basic'
    star_alignintronmax        = 1000000
    star_alignmatesmax         = 1000
    star_limitsjdbinsertions   = 1200000
    save_unaligned             = false
    save_align_intermeds       = false
    
    // Bowtie2 parameters
    bowtie2_mode               = 'sensitive-local'
    
    // Bismark parameters  
    bismark_mode               = 'bowtie2'
    bismark_non_directional    = false
    bismark_cytosine_report    = true
    
    // Peak calling
    macs2_gsize                = 'hs'
    macs2_narrow_peak          = true
    macs2_broad_peak           = false
    macs2_endseq_params        = '--nomodel --shift -100 --extsize 200'
    macs2_sdripseq_params      = '--broad --broad-cutoff 0.1'
    
    // Quantification
    featurecounts_group_type   = 'gene_biotype'
    featurecounts_feature_type = 'exon'
    skip_deseq2                = false
    
    // Variant calling
    enable_variants            = true
    skip_gatk                  = false
    dbsnp_known_snps           = null
    
    // Methylation
    skip_methylation           = false
    bismark_comprehensive      = false
    bismark_merge_ctxt         = true
    
    // ML and visualization
    skip_ml                    = false
    pca_header_multiqc         = true
    
    // External APIs
    enable_tcga                = false
    enable_string              = false
    string_species             = 9606
    
    // MultiQC
    multiqc_config             = null
    multiqc_title              = null
    multiqc_logo               = null
    max_multiqc_email_size     = '25.MB'
    
    // Boilerplate options
    publish_dir_mode           = 'copy'
    email                      = null
    email_on_fail              = null
    plaintext_email            = false
    monochrome_logs            = false
    hook_url                   = null
    help                       = false
    validate_params            = true
    show_hidden_params         = false
    schema_ignore_params       = 'genomes'
    
    // Config files
    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_description = null
    config_profile_contact     = null
    config_profile_url         = null
    config_profile_name        = null
    
    // Max resource options
    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'
}

// Load base.config by default for all pipelines
includeConfig 'conf/profiles.config'

profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    conda {
        conda.enabled          = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    mamba {
        conda.enabled          = true
        conda.useMamba         = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    podman {
        podman.enabled         = true
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    shifter {
        shifter.enabled        = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        charliecloud.enabled   = false
    }
    charliecloud {
        charliecloud.enabled   = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
    }
    gitpod {
        executor.name          = 'local'
        executor.cpus          = 16
        executor.memory        = 60.GB
    }
    test      { includeConfig 'conf/test.config'      }
    test_full { includeConfig 'conf/test_full.config' }
}

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'NGS_pipeline'
    author          = 'srhartono@ucdavis.edu'
    homePage        = 'https://github.com/srhartono/ngs_pipeline'
    description     = 'Multiomics pipeline for NGS functional analysis'
    mainScript      = 'main.nf'
    nextflowVersion = '>=22.04.0'
    version         = '1.0.0'
    doi             = ''
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}