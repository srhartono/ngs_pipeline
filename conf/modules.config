/*
 * Process-specific module configurations
 */

process {
    
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
    
    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    
    withName: FASTQC {
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/qc/fastqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    
    withName: TRIMGALORE {
        ext.args = [
            '--fastqc',
            params.trim_nextseq > 0 ? "--nextseq ${params.trim_nextseq}" : ''
        ].join(' ').trim()
        publishDir = [
            [
                path: { "${params.outdir}/qc/trimming" },
                mode: params.publish_dir_mode,
                pattern: "*.{html,zip,txt}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ],
            [
                path: { "${params.outdir}/qc/trimming" },
                mode: params.publish_dir_mode,
                pattern: "*.fq.gz",
                enabled: params.save_trimmed_reads,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        ]
    }
    
    withName: STAR_ALIGN {
        ext.args = [
            '--outSAMtype BAM SortedByCoordinate',
            '--readFilesCommand zcat',
            '--runRNGseed 0',
            '--outFilterMultimapNmax 20',
            '--alignSJDBoverhangMin 1',
            '--outSAMattributes NH HI AS NM MD',
            params.save_unaligned ? '--outReadsUnmapped Fastx' : ''
        ].join(' ').trim()
        publishDir = [
            [
                path: { "${params.outdir}/mapping/star" },
                mode: params.publish_dir_mode,
                pattern: "*.{out,tab}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ],
            [
                path: { "${params.outdir}/mapping/star" },
                mode: params.publish_dir_mode,
                pattern: "*.bam",
                enabled: params.save_align_intermeds,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ],
            [
                path: { "${params.outdir}/mapping/star" },
                mode: params.publish_dir_mode,
                pattern: "*.{fastq.gz}",
                enabled: params.save_unaligned,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        ]
    }
    
    withName: BOWTIE2_ALIGN {
        ext.args = '--very-sensitive-local --dovetail'
        publishDir = [
            path: { "${params.outdir}/mapping/bowtie2" },
            mode: params.publish_dir_mode,
            pattern: "*.{log}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    
    withName: BISMARK_ALIGN {
        ext.args = [
            params.bismark_non_directional ? '--non_directional' : '',
            '--bowtie2'
        ].join(' ').trim()
        publishDir = [
            [
                path: { "${params.outdir}/mapping/bismark" },
                mode: params.publish_dir_mode,
                pattern: "*.{txt}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ],
            [
                path: { "${params.outdir}/mapping/bismark" },
                mode: params.publish_dir_mode,
                pattern: "*.bam",
                enabled: params.save_align_intermeds,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        ]
    }
    
    withName: SAMTOOLS_SORT {
        ext.prefix = { "${meta.id}.sorted" }
        publishDir = [
            path: { "${params.outdir}/mapping/${meta.assay.toLowerCase()}" },
            mode: params.publish_dir_mode,
            pattern: "*.bam",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    
    withName: SAMTOOLS_INDEX {
        publishDir = [
            path: { "${params.outdir}/mapping/${meta.assay.toLowerCase()}" },
            mode: params.publish_dir_mode,
            pattern: "*.bai",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    
    withName: PICARD_MARKDUPLICATES {
        ext.args = 'ASSUME_SORTED=true VALIDATION_STRINGENCY=LENIENT TMP_DIR=tmp'
        ext.prefix = { "${meta.id}.markdup" }
        publishDir = [
            [
                path: { "${params.outdir}/mapping/${meta.assay.toLowerCase()}" },
                mode: params.publish_dir_mode,
                pattern: "*.bam",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ],
            [
                path: { "${params.outdir}/qc/picard" },
                mode: params.publish_dir_mode,
                pattern: "*.metrics.txt",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        ]
    }
    
    withName: DEEPTOOLS_BAMCOVERAGE {
        ext.args = [
            '--binSize 10',
            '--normalizeUsing RPKM',
            '--exactScaling'
        ].join(' ')
        publishDir = [
            path: { "${params.outdir}/tracks/bigwig" },
            mode: params.publish_dir_mode,
            pattern: "*.bigWig",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    
    withName: MACS2_CALLPEAK {
        ext.args = { meta.assay == 'ENDseq' ? params.macs2_endseq_params : 
                     meta.assay == 'sDRIPseq' ? params.macs2_sdripseq_params : 
                     '--nomodel --extsize 147' }
        publishDir = [
            path: { "${params.outdir}/peaks/macs2" },
            mode: params.publish_dir_mode,
            pattern: "*.{narrowPeak,broadPeak,xls,bed,bdg}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    
    withName: FEATURECOUNTS {
        ext.args = [
            '-g gene_id',
            '-t exon',
            '-Q 10',
            '-s 0'
        ].join(' ')
        publishDir = [
            path: { "${params.outdir}/quantification/counts" },
            mode: params.publish_dir_mode,
            pattern: "*.{txt,summary}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    
    withName: DESEQ2_DIFFERENTIAL {
        publishDir = [
            path: { "${params.outdir}/quantification/deseq2" },
            mode: params.publish_dir_mode,
            pattern: "*.{csv,txt,pdf,png}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    
    withName: BCFTOOLS_MPILEUP {
        ext.args = '-Ou -f'
        publishDir = [
            path: { "${params.outdir}/variants/bcftools" },
            mode: params.publish_dir_mode,
            pattern: "*.vcf.gz*",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    
    withName: GATK4_HAPLOTYPECALLER {
        ext.args = '--dont-use-soft-clipped-bases'
        publishDir = [
            path: { "${params.outdir}/variants/gatk" },
            mode: params.publish_dir_mode,
            pattern: "*.vcf.gz*",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    
    withName: BISMARK_METHYLATIONEXTRACTOR {
        ext.args = [
            params.bismark_comprehensive ? '--comprehensive' : '',
            params.bismark_merge_ctxt ? '--merge_non_CpG' : '',
            '--bedGraph --counts --report'
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/methylation/contexts" },
            mode: params.publish_dir_mode,
            pattern: "*.{txt,bedGraph,bismark.cov.gz}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    
    withName: MULTIQC {
        ext.args = params.multiqc_title ? "--title \"$params.multiqc_title\"" : ''
        publishDir = [
            path: { "${params.outdir}/qc/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    
    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}