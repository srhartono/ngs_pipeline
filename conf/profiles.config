/*
 * Configuration for different execution profiles
 */

profiles {
    
    local {
        process {
            executor = 'local'
            cpus = { check_max( 1 * task.attempt, 'cpus' ) }
            memory = { check_max( 6.GB * task.attempt, 'memory' ) }
            time = { check_max( 4.h * task.attempt, 'time' ) }
            
            errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
            maxRetries = 1
            maxErrors = '-1'
            
            // Process-specific resources
            withLabel:process_single {
                cpus = { check_max( 1, 'cpus' ) }
                memory = { check_max( 6.GB * task.attempt, 'memory' ) }
                time = { check_max( 4.h * task.attempt, 'time' ) }
            }
            withLabel:process_low {
                cpus = { check_max( 2 * task.attempt, 'cpus' ) }
                memory = { check_max( 12.GB * task.attempt, 'memory' ) }
                time = { check_max( 4.h * task.attempt, 'time' ) }
            }
            withLabel:process_medium {
                cpus = { check_max( 6 * task.attempt, 'cpus' ) }
                memory = { check_max( 36.GB * task.attempt, 'memory' ) }
                time = { check_max( 8.h * task.attempt, 'time' ) }
            }
            withLabel:process_high {
                cpus = { check_max( 12 * task.attempt, 'cpus' ) }
                memory = { check_max( 72.GB * task.attempt, 'memory' ) }
                time = { check_max( 16.h * task.attempt, 'time' ) }
            }
            withLabel:process_long {
                time = { check_max( 20.h * task.attempt, 'time' ) }
            }
            withLabel:process_high_memory {
                memory = { check_max( 200.GB * task.attempt, 'memory' ) }
            }
            withLabel:error_ignore {
                errorStrategy = 'ignore'
            }
            withLabel:error_retry {
                errorStrategy = 'retry'
                maxRetries = 2
            }
        }
    }
    
    slurm {
        process {
            executor = 'slurm'
            queue = 'normal'
            clusterOptions = '--account=default'
            
            cpus = { check_max( 1 * task.attempt, 'cpus' ) }
            memory = { check_max( 6.GB * task.attempt, 'memory' ) }
            time = { check_max( 4.h * task.attempt, 'time' ) }
            
            errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
            maxRetries = 1
            maxErrors = '-1'
            
            // Process-specific resources
            withLabel:process_single {
                cpus = { check_max( 1, 'cpus' ) }
                memory = { check_max( 6.GB * task.attempt, 'memory' ) }
                time = { check_max( 4.h * task.attempt, 'time' ) }
            }
            withLabel:process_low {
                cpus = { check_max( 2 * task.attempt, 'cpus' ) }
                memory = { check_max( 12.GB * task.attempt, 'memory' ) }
                time = { check_max( 4.h * task.attempt, 'time' ) }
            }
            withLabel:process_medium {
                cpus = { check_max( 6 * task.attempt, 'cpus' ) }
                memory = { check_max( 36.GB * task.attempt, 'memory' ) }
                time = { check_max( 8.h * task.attempt, 'time' ) }
            }
            withLabel:process_high {
                cpus = { check_max( 12 * task.attempt, 'cpus' ) }
                memory = { check_max( 72.GB * task.attempt, 'memory' ) }
                time = { check_max( 16.h * task.attempt, 'time' ) }
            }
            withLabel:process_long {
                time = { check_max( 20.h * task.attempt, 'time' ) }
            }
            withLabel:process_high_memory {
                memory = { check_max( 200.GB * task.attempt, 'memory' ) }
                queue = 'highmem'
            }
            withLabel:error_ignore {
                errorStrategy = 'ignore'
            }
            withLabel:error_retry {
                errorStrategy = 'retry'
                maxRetries = 2
            }
        }
        executor {
            $slurm {
                queueSize = 50
                submitRateLimit = '10 sec'
            }
        }
    }
    
    awsbatch {
        process {
            executor = 'awsbatch'
            queue = 'xrn2-multiomics-queue'
            
            cpus = { check_max( 1 * task.attempt, 'cpus' ) }
            memory = { check_max( 6.GB * task.attempt, 'memory' ) }
            time = { check_max( 4.h * task.attempt, 'time' ) }
            
            errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
            maxRetries = 1
            maxErrors = '-1'
            
            // Process-specific resources
            withLabel:process_single {
                cpus = { check_max( 1, 'cpus' ) }
                memory = { check_max( 6.GB * task.attempt, 'memory' ) }
                time = { check_max( 4.h * task.attempt, 'time' ) }
            }
            withLabel:process_low {
                cpus = { check_max( 2 * task.attempt, 'cpus' ) }
                memory = { check_max( 12.GB * task.attempt, 'memory' ) }
                time = { check_max( 4.h * task.attempt, 'time' ) }
            }
            withLabel:process_medium {
                cpus = { check_max( 6 * task.attempt, 'cpus' ) }
                memory = { check_max( 36.GB * task.attempt, 'memory' ) }
                time = { check_max( 8.h * task.attempt, 'time' ) }
            }
            withLabel:process_high {
                cpus = { check_max( 12 * task.attempt, 'cpus' ) }
                memory = { check_max( 72.GB * task.attempt, 'memory' ) }
                time = { check_max( 16.h * task.attempt, 'time' ) }
            }
            withLabel:process_long {
                time = { check_max( 20.h * task.attempt, 'time' ) }
            }
            withLabel:process_high_memory {
                memory = { check_max( 200.GB * task.attempt, 'memory' ) }
            }
            withLabel:error_ignore {
                errorStrategy = 'ignore'
            }
            withLabel:error_retry {
                errorStrategy = 'retry'
                maxRetries = 2
            }
        }
        
        aws {
            region = 'us-east-1'
            batch {
                cliPath = '/home/ec2-user/miniconda/bin/aws'
            }
        }
        
        executor {
            $awsbatch {
                queueSize = 1000
                submitRateLimit = '50 sec'
            }
        }
    }
    
    test {
        params {
            config_profile_name        = 'Test profile'
            config_profile_description = 'Minimal test dataset to check pipeline function'
            
            // Limit resources so that this can run on GitHub Actions
            max_cpus   = 2
            max_memory = '6.GB'
            max_time   = '6.h'
            
            // Test data
            samples = 'tests/data/samplesheet_test.tsv'
            
            // Reduced parameters for testing
            star_alignintronmax = 100000
            star_limitsjdbinsertions = 120000
            
            // Skip resource-intensive steps
            skip_multiqc = false
            enable_tcga = false
            enable_string = false
        }
    }
    
    test_full {
        params {
            config_profile_name        = 'Full test profile'
            config_profile_description = 'Full size test dataset to check pipeline function'
            
            // Full test data
            samples = 'tests/data/samplesheet_full.tsv'
            
            // Enable all features
            enable_tcga = true
            enable_string = true
        }
    }
    
    docker {
        docker {
            enabled = true
            userEmulation = true
        }
        
        process {
            container = 'NGSPipeline/ngs_pipeline:1.0.0'
        }
    }
    
    singularity {
        singularity {
            enabled = true
            autoMounts = true
        }
        
        process {
            container = 'docker://NGSPipeline/ngs_pipeline:1.0.0'
        }
    }
}